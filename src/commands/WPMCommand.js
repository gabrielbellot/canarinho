const Command = require("../structures/Command");

class WPMCommand extends Command {

    constructor () {
        super("wpm", ["palavras", "ppm"]);
    }

    async run(message, args) {
        const phrase = this.getPhrase();
        const normalized = this.normalize(phrase).replace("\u200B", "");
        const phraseLength = phrase.split(" ").length;

        message.reply(`Escreva a seguinte frase dentro de **30** segundos: ‚å®Ô∏èüèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏èüïê \n\n\`\`\`${phrase}\`\`\``);
        const millis = new Date().getTime();

        const collector = message.channel.createMessageCollector(m => (m.author.id === message.author.id), { time: 30000 });

        collector.on("collect", (m) => {
            if (m.author.id !== message.author.id)
                return

            collector.stop("Success");
            const processedContent = this.normalize(m.content);

            // Verifica√ß√£o de copiar e colar
            if (m.content.includes("\u200B")) {
                message.reply("üö´ **N√£o √© permitido copiar e colar a frase!**");
                return;
            }

            // Verifica√ß√£o de erro na frase
            if (processedContent !== normalized) {
                message.reply("‚ùå **Voc√™ errou a frase! Tente novamente.**");
                return;
            }

            // C√°lculo do tempo de digita√ß√£o
            const diff = new Date().getTime() - millis;
            const seconds = diff / 1000;
            const minutes = diff / 1000 / 60;

            const wpm = Math.round(phraseLength / minutes);
            const difficultyScore = this.calculateDifficultyScore(phrase); // Ajustando a pontua√ß√£o

            message.reply(`‚úÖ **Voc√™ acertou a frase em ${seconds.toFixed(2)} segundos!**\n‚ú® Isso significa que voc√™ escreveu aproximadamente **${wpm} palavras por minuto (WPM)**!\nüí° **Pontua√ß√£o de Dificuldade**: ${difficultyScore} pontos. Quanto mais dif√≠cil a frase, maior a pontua√ß√£o!`);
        });

        collector.on("end", (collected, r) => {
            if (r === "Success")
                return;

            message.reply("‚è∞ **Voc√™ n√£o respondeu a tempo! Tente novamente.**");
        });
    }

    getPhrase() {
        let phrases = [
            { text: "Quando voc√™ tem f√©, o imposs√≠vel come√ßa a acontecer.", difficulty: 1 },
            { text: "N√£o apago os meus erros, por que eles escreveram os meus recome√ßos.", difficulty: 2 },
            { text: "A vida s√≥ vai para frente depois que voc√™ larga as coisas que te levam para tr√°s.", difficulty: 3 },
            { text: "Amar √© encontrar no outro a sua pr√≥pria felicidade.", difficulty: 2 },
            { text: "Ele ir√° reduzir o tempo necess√°rio para o nosso programa na inicializa√ß√£o.", difficulty: 3 },
            { text: "O presidente acaba de assinar o decreto autorizando o porte de armas.", difficulty: 3 },
            { text: "Vemos que a percep√ß√£o das dificuldades garante a contribui√ß√£o de um grupo importante.", difficulty: 3 },
            { text: "Que o vento leve o necess√°rio e nos traga o suficiente.", difficulty: 2 },
            { text: "N√£o existem limites para nossos sonhos, basta acreditar!", difficulty: 1 },
            { text: "Por acaso voc√™ conhece aquela turma?", difficulty: 1 },
            { text: "Valoriza quem te valoriza pois existe quem s√≥ te procura quando precisa.", difficulty: 2 },
            { text: "Coisas pequenas se tornam gigantes quando feitas com amor.", difficulty: 2 },
            { text: "A tecnologia pode ser tanto uma aliada quanto uma amea√ßa, dependendo do uso.", difficulty: 3 },
            { text: "Seja a mudan√ßa que voc√™ deseja ver no mundo.", difficulty: 1 },
            { text: "O conhecimento √© a √∫nica riqueza que ningu√©m pode tirar de voc√™.", difficulty: 2 },
            { text: "Caminhar em meio ao caos exige coragem, paci√™ncia e sabedoria.", difficulty: 3 },
            { text: "O sucesso √© a soma de pequenos esfor√ßos repetidos diariamente.", difficulty: 2 },
            { text: "√Äs vezes, √© preciso se perder para se encontrar de verdade.", difficulty: 2 },
            { text: "Nem todos que vagam est√£o perdidos.", difficulty: 1 },
            { text: "A simplicidade √© o √∫ltimo grau de sofistica√ß√£o.", difficulty: 2 },
            { text: "Grandes ideias surgem da observa√ß√£o dos pequenos detalhes.", difficulty: 3 },
            { text: "O tempo √© o recurso mais precioso que possu√≠mos.", difficulty: 2 },
            { text: "Persist√™ncia √© o caminho do √™xito, mesmo diante do fracasso.", difficulty: 2 },
            { text: "Seja gentil, pois cada pessoa enfrenta batalhas que voc√™ n√£o v√™.", difficulty: 2 },
            { text: "O aprendizado come√ßa quando sa√≠mos da zona de conforto.", difficulty: 2 }
        ];

        const selected = phrases[Math.floor(Math.random() * phrases.length)];

        const processedPhrase = selected.text.split("").join("\u200B");
        this.currentDifficulty = selected.difficulty;

        return processedPhrase;
    }

    normalize(phrase) {
        return phrase.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[,.;!?:]/g, "").replace(/[\u200B]/g, "").toLowerCase();
    }

    // Fun√ß√£o para calcular a pontua√ß√£o de dificuldade com base no n√≠vel da frase
    calculateDifficultyScore(phrase) {
        // A pontua√ß√£o √© baseada na dificuldade da frase e no n√∫mero de palavras
        const difficultyMultiplier = this.currentDifficulty * 2;
        const phraseLength = phrase.split(" ").length;
        return Math.round(difficultyMultiplier * phraseLength);
    }
}

module.exports = WPMCommand;
